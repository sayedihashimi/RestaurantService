// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyRestaurantApi.Data;

#nullable disable

namespace MyRestaurantApi.Migrations
{
    [DbContext(typeof(MyRestaurantApiContext))]
    [Migration("20240830040043_sqlite_migration_675")]
    partial class sqlite_migration_675
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("MyRestaurantApi.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contact");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "sayed@example.com",
                            Name = "Sayed Hashimi",
                            Phone = "555-111-2222"
                        },
                        new
                        {
                            Id = 2,
                            Email = "mads@example.com",
                            Name = "Mads Kristensen",
                            Phone = "555-111-3333"
                        },
                        new
                        {
                            Id = 3,
                            Email = "elineb@example.com",
                            Name = "Eline Barstad",
                            Phone = "555-111-4444"
                        },
                        new
                        {
                            Id = 4,
                            Email = "theol@example.com",
                            Name = "Theodore Lamy",
                            Phone = "555-111-5555"
                        },
                        new
                        {
                            Id = 5,
                            Email = "mariaz@example.com",
                            Name = "María Zelaya",
                            Phone = "555-111-6666"
                        },
                        new
                        {
                            Id = 6,
                            Email = "kubans@example.com",
                            Name = "Kubanychbek Sagynbek",
                            Phone = "555-111-7777"
                        },
                        new
                        {
                            Id = 7,
                            Email = "deniseb@example.com",
                            Name = "Denise Bourgeois",
                            Phone = "555-111-8888"
                        },
                        new
                        {
                            Id = 8,
                            Email = "robind@example.com",
                            Name = "Robin Danielsen",
                            Phone = "555-111-9999"
                        });
                });

            modelBuilder.Entity("MyRestaurantApi.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmojiName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MenuItem");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            Category = 0,
                            Description = "Two eggs sunny side up and wheat toast",
                            EmojiName = "🍳🍳🍞",
                            Name = "Two eggs and toast",
                            Price = 6.09m
                        },
                        new
                        {
                            Id = 1002,
                            Category = 0,
                            Description = "Small steak and two eggs",
                            EmojiName = "🥩🍳🍳",
                            Name = "Steak and Two eggs",
                            Price = 10.09m
                        },
                        new
                        {
                            Id = 2000,
                            Category = 1,
                            Description = "Enjoy a half portion of crispy fried chicken paired with a fluffy Belgian waffle, dusted with powdered sugar and accompanied by luscious strawberry butter. Complemented with our special sweet and spicy sauce, it's a true culinary delight.",
                            EmojiName = "🍗🧇",
                            Name = "Fried Chicken & Waffle",
                            Price = 16.79m
                        },
                        new
                        {
                            Id = 2001,
                            Category = 1,
                            Description = "Savor our seasoned sirloin steak alongside fluffy scrambled eggs and roasted grape tomatoes, all atop golden hashbrown potatoes and finished with a decadent drizzle of hollandaise sauce.",
                            EmojiName = "🥩🍳🍅🥔",
                            Name = "Steak & Scramble Bowl",
                            Price = 13.79m
                        },
                        new
                        {
                            Id = 2002,
                            Category = 1,
                            Description = "Delight in our distinctive Belgian waffle, adorned with a luscious drizzle of strawberry cream cheese icing, fresh strawberries, delectable cobbler crumble, and a sprinkle of powdered sugar.",
                            EmojiName = "🍓🍰🧇",
                            Name = "Strawberry Shortcake Waffle",
                            Price = 10.49m
                        },
                        new
                        {
                            Id = 2003,
                            Category = 1,
                            Description = "Indulge in our tender country fried steak, smothered in rich homemade sausage gravy, accompanied by two eggs cooked to your preference and your choice of side.",
                            EmojiName = "🥩🍳🍳",
                            Name = "Country Fried Steak",
                            Price = 16.99m
                        },
                        new
                        {
                            Id = 2004,
                            Category = 1,
                            Description = "Savor our tender, lightly fried chicken, enhanced with a zesty pineapple-orange sauce and garnished with fresh scallions. Presented on a bed of seasoned white rice alongside a colorful medley of shredded carrots, red cabbage, corn, green peppers, and onion.",
                            EmojiName = "🍗🍍🍚",
                            Name = "Tangy Chicken Bowl",
                            Price = 10.99m
                        },
                        new
                        {
                            Id = 2005,
                            Category = 1,
                            Description = "It's a cheese burger without the cheese",
                            EmojiName = "🍔",
                            Name = "Hamburger",
                            Price = 3.68m
                        },
                        new
                        {
                            Id = 2006,
                            Category = 1,
                            Description = "It's a cheese burger without the cheese, with two beef patties",
                            EmojiName = "🍔🍔",
                            Name = "Hamburger - double",
                            Price = 5.7m
                        },
                        new
                        {
                            Id = 2007,
                            Category = 1,
                            Description = "A hamburger with cheese",
                            EmojiName = "🍔🧀",
                            Name = "Cheeseburger",
                            Price = 4.09m
                        },
                        new
                        {
                            Id = 2008,
                            Category = 1,
                            Description = "A hamburger with cheese, with two beef patties",
                            EmojiName = "🍔🍔🧀",
                            Name = "Cheeseburger - double",
                            Price = 5.09m
                        },
                        new
                        {
                            Id = 2009,
                            Category = 1,
                            Description = "Mushroom & Swiss burger",
                            EmojiName = "🍔🍄🧀",
                            Name = "Mushroom & Swiss burger",
                            Price = 4.59m
                        },
                        new
                        {
                            Id = 2010,
                            Category = 1,
                            Description = "Mushroom & Swiss burger, with two beef patties",
                            EmojiName = "🍔🍔🍄🧀",
                            Name = "Mushroom & Swiss burger - double",
                            Price = 6.09m
                        },
                        new
                        {
                            Id = 3000,
                            Category = 2,
                            Description = "Ribeye Steak and mashed potatoes",
                            EmojiName = "🥩🥔",
                            Name = "Steak and mashed potatoes",
                            Price = 15.09m
                        },
                        new
                        {
                            Id = 3001,
                            Category = 2,
                            Description = "Golden beer-battered white fish, fried to perfection, accompanied by tartar sauce, coleslaw, and seasoned fries.",
                            EmojiName = "🐟🍟",
                            Name = "Fish and chips",
                            Price = 14.49m
                        },
                        new
                        {
                            Id = 3002,
                            Category = 2,
                            Description = "Sam's renowned creation: succulent griddle-seared meatloaf smothered in a luscious brown gravy, served alongside velvety mashed potatoes and tender steamed green beans.",
                            EmojiName = "🍖🍞",
                            Name = "Sam's famous meatloaf",
                            Price = 14.49m
                        },
                        new
                        {
                            Id = 3003,
                            Category = 2,
                            Description = "Indulge in Sam's signature dish: tender chicken, carrots, celery, and corn bathed in our velvety cream sauce, all crowned with our unique homemade biscuit crust.",
                            EmojiName = "🍗🥧",
                            Name = "Sam's famous Chicken Pot Pie",
                            Price = 14.49m
                        });
                });

            modelBuilder.Entity("MyRestaurantApi.MenuItemOrdered", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("TogoOrderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TogoOrderId");

                    b.ToTable("MenuItemOrdered");
                });

            modelBuilder.Entity("MyRestaurantApi.TogoOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("OrderCreated")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Subtotal")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Total")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("TogoOrder");
                });

            modelBuilder.Entity("MyRestaurantApi.MenuItemOrdered", b =>
                {
                    b.HasOne("MyRestaurantApi.TogoOrder", null)
                        .WithMany("ItemsOrdered")
                        .HasForeignKey("TogoOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyRestaurantApi.TogoOrder", b =>
                {
                    b.HasOne("MyRestaurantApi.Contact", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MyRestaurantApi.TogoOrder", b =>
                {
                    b.Navigation("ItemsOrdered");
                });
#pragma warning restore 612, 618
        }
    }
}
